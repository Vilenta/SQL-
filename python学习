1/集合类型
    集合用{}表示，元素间用逗号分隔，建立集合类型，使用{}或set（）！！！建立空集合必须使用set（）
    集合无重复>>>>>>>>>>>数据去重/包含关系比较
    集合间的操作主要是S|T(并集),S-T(差集),S&T(交集),S^T(补集)
    集合间的操作符：
        S|T：返回新集合，包括S和T中的所有元素，可以用S |= T 刷新S集合
        S-T：返回新集合，包括S中但不在T中的元素，可以用S -=T 刷新S集合
        S&T：返回新集合，包括S和T中同时存在的元素，可以用S &=T 刷新集合
        S^T：返回新集合，包括S和T中不相同的元素，可以用S ^=T 刷新集合
        S<=T 或 S<T：返回True或者False，判断S和T之间的子集关系
        S>=T 或 S>T：返回True或者False，判断S和T之间的包含关系
    集合的处理方法：
        S.add(x):如果X不在S集合中，添加x元素
        S.discard(x)：移除S集合中x元素，如果x不在集合中，不报错
        S.remove(x)：移除S集合中x元素，如果x不在集合中，报错
        S.clear()：移除S集合中所有元素
        S.pop()：随机返回S集合中的一个元素，当S集合为空集时，报错
        S.cpoy():返回集合S的一个副本
        len(S):返回集合S的元素个数
        x in S:判断x是不是在集合S内，在返回True，否则返回False
        x not in S:判断x是不是在集合S内，不在返回True，否则返回False
        set(x):把其他变量类型x变成集合类型
——————————————————————————————————————————————————————————————————————————
        #S,pop()处理方式：A = {'p','y',123}
             try:
                 while True:
                     print(A.pop(),end = '')
             except:
                 pass
             #随机取出A集合中的某一元素，直到A集合为空集，运行try...except...，进行程序异常处理
——————————————————————————————————————————————————————————————————————————
###数据去重：利用集合元素无重复的特点，进行数据去重【列表 -> 集合 -> 列表】
    >>> ls = ['p','y','p','y',123]
    >>> s = set(ls)  #利用集合无重复的特点
    {'p','y',123}
    >>> lt = list(s) #将集合转换成列表
    ['p','y',123]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
2/序列类型
    序列类型，有一定的先后顺序，主要包括字符串类型，元组类型及列表类型
    序列类型通用操作符：【6种】
        x in s:判断x是不是在序列s中，在返回True，否则返回False
        x not in s：判断x是不是在序列s中，不在返回True，否则返回False
        s + t：连接序列s和序列t
        s*n：将序列s复制n次
        s[i]：索引，返回序列s中第i元素
        s[j:j:k]：切片，返回序列s中第i到j，以k为步长的元素子序列
    序列类型通用函数和方法：【5个】
        len(s):返回序列s的长度，即元素个数
        min(s)：返回序列s中的最小值，要求元素可以比较
        max(s)：返回序列s中的最大值，要求元素可以比较
        s.index(i)：返回元素i在序列s中第一次出现的位置
        s.count(x)：返回序列s中出现x的次数
——————————————————————
  元组类型：一旦创建就不能被修改，用()或tuple()表示，元素之间用逗号隔开
      可以使用小括号()或不用()
        #例：def func（）：
                return 1，2  #返回(1，2)就是一种元组类型
        继承全部通用操作及函数，因创建后无法修改，所以无特殊操作
—————————————————————— 
  列表类型： 创建后可以任意修改，用[]或list()表示，元素之间用逗号隔开
      元素可以采用多种不同的类型，无长度限制
            ls = ['cat','dog','tiger',1024]
            lt = ls #把ls列表赋值给lt，并不代表真正创建了一个新列表，只是给这个列表添加了一个叫lt的新名字，ls和lt同时指向这个列表
            lt = ['cat','dog','tiger',1024]
     列表类型操作函数和方法：
         ls[i]=x:替换ls中第i元素为x
         ls[i:j:k]=lt：用列表lt替换ls切片后所对应元素子列表
         del ls[i]：删除列表ls中第i元素
         del ls[i:j:k]：删除列表ls中第i到j，以k为步长的元素
         ls += lt：更新列表ls，把列表lt中的元素添加到ls
         ls *= n：更新列表ls，其元素重复n次
         ls.append(x):在列表ls最后添加元素x
         ls.clear()：删除列表ls中的所有元素
         ls.copy：复制列表ls，生成一个新列表
         ls.insert(i,x)：在列表ls中的第i个位置，插入元素x
         ls.pop(i)：将列表ls中第i个元素取出，并删除该元素
         ls.remove(x)：将列表ls中第一个元素x删除
         ls.reverse()：将列表ls的元素反转
————————————————————————————————————————————————————————————————————————
        序列类型应用场景：
        1.元素遍历：使用for...in...循环
        2.数据保护：把想保护的数据类型转换成元组类型【利用元组的无法修改特性】
        ls = ['cat','dog','tiger',1024]
        lt = tuple(ls)
        lt
        >>>('cat','dog','tiger',1024)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3/字典类型
    字典类型：<key:value>键值的表达方式，用{}或dict()表示，键值对用冒号表示，每个键值对之间用逗号隔开
    字典类型操作函数和方法:
        del d[k]:删除字典d中键k对应的value值
        k in d：判断键k是不是在字典d中，在返回True，否则返回False       d={'中国':'北京','美国':'华盛顿','法国':'巴黎'}
        d.keys()：返回字典d中所有k值                #返回不是列表类型  >>>d.keys()    >>>dict_keys(['中国','美国','法国'])
        d.values()：返回字典d中所有value值                          >>>d.values()   >>>dict_values(['北京','华盛顿','巴黎'])              
        d.items()：返回字典d中所有<key:value>键值对
        ★d.get(k,default):k存在，返回对应的value，否则返回default
        d.pop(k,default)：k存在，取出对应的value，否则返回default
        d.popitem():从字典中随机取出一对键值，以元组的形式返回
        d.clear()：清除字典中所有的键值对
        len(d）：返回字典中元素的个数
——————————————————————————————————————————————
    d.get(k,default)的应用
    d = {'中国':'北京','美国':'华盛顿','法国':'巴黎'}
    d.get('中国','伊斯兰堡')    #存在k='中国'，返回对应的value='北京'
    >>>'北京'
    d.get('巴基斯坦','伊斯兰堡')    #不存在k= '巴基斯坦'，则返回default = '伊斯兰堡'
    >>>'伊斯兰堡'
——————————————————————————————————————————————————————————————
        字典类型的应用场景：
        1.利用键值对的数据，统计次数
        2.元素遍历
